#!/bin/bash
#PBS -l select=16:ncpus=60:mpiprocs=60:mem=220gb
#PBS -l walltime=4:00:00
#PBS -N f1_racecar_140m
#PBS -k oed

exprot MODEL=f1_racecar_140m
export OUTPUT_DIR=$PBS_O_WORKDIR
export ANSYSLMD_LICENSE_FILE=1055@localhost
export ANSYSLI_SERVERS=2325@localhost
export FLUENT_HOSTNAME=`hostname`
export APPLICATION=fluent
export VERSION=v193
export MPI=hpcx
export FLUENT_PATH=/apps/CFD/ansys_inc/$VERSION/fluent
export PATH=$FLUENT_PATH/bin:$PATH

# Uncomment the ssh line below for ssh tunnel to license server.
# Also add the right ip address, add a ssh public key to the authorized_keys file for the specified user,
# and update 58878 to match the port number that the ansyslmd is running on
# ssh -fNT -g -L 1055:localhost:1055 -L 2325:localhost:2325 -L 58878:localhost:58878 tunnel@XX.XXX.XX.XX

start_time=$SECONDS
mkdir -p /data/projects/hpcuser/$PBS_JOBID
cd /data/projects/hpcuser/$PBS_JOBID

CORES=`cat $PBS_NODEFILE | wc -l`
NODES=`cat $PBS_NODEFILE | sort | uniq | wc -l`
cat $PBS_NODEFILE | uniq -c | awk '{ print $2 ":" $1 }' > hosts
PPN=`cat $PBS_NODEFILE | uniq -c | head -1 | awk '{ print $1 }'`
DATE=`date +"%Y%m%d_%H%M%S"`
PKEY=`cat /sys/class/infiniband/mlx5_0/ports/1/pkeys/* | grep -v 0000 | grep -v 0x7fff`
PKEY=`echo "${PKEY/0x8/0x0}"`
echo "PKEY: $PKEY"

HPCX_VERSION=$(ls -atr /opt | grep hpcx | tail -n1)
module use /opt/${HPCX_VERSION}/modulefiles
module load hpcx

RUNDIR=$PWD
 
export OPENMPI_ROOT=$MPI_HOME
rm -f $RUNDIR/lib*.so*
ln -s $OPENMPI_ROOT/lib/libmpi.so $RUNDIR/libmpi.so.1
ln -s $OPENMPI_ROOT/lib/libopen-pal.so $RUNDIR/libopen-pal.so.4
ln -s $OPENMPI_ROOT/lib/libopen-rte.so $RUNDIR/libopen-rte.so.4
export LD_LIBRARY_PATH=${RUNDIR}:${LD_LIBRARY_PATH}

mpi_opts="-bind-to core -map-by node -report-bindings -x UCX_NET_DEVICES=mlx5_0:1 -x UCX_IB_PKEY=$PKEY -mca btl_openib_if_include mlx5_0:1 -x UCX_TLS=ud,sm,self"
if [ "$CORES" -gt 4800 ]; then
    ans_lic_type=anshpc_pack
else
    ans_lic_type=anshpc
fi

if [ "$PPN" -lt 60 ]; then
    aff=off
else
    aff=on
fi

echo "License Type: $ans_lic_type"

fluentbench.pl \
    -path=$FLUENT_PATH \
    -ssh \
    -norm \
    -nosyslog \
    $MODEL \
    -t$CORES \
    -pinfiniband \
    -mpi=openmpi \
    -mpiopt="-mca btl ^vader,tcp,openib -mca plm_rsh_no_tree_spawn 1 -mca plm_rsh_num_concurrent 300 -mca plm_base_verbose 5 -mca routed_base_verbose 5 -bind-to core -map-by node -report-bindings -x UCX_NET_DEVICES=mlx5_0:1 -x UCX_IB_PKEY=$PKEY -mca btl_openib_if_include mlx5_0:1 -x UCX_TLS=ud,sm,self" \
    -cnf=hosts \
    -affinity=$aff \
    -feature_parallel_preferred=$ans_lic_type

end_time=$SECONDS
clock_time=$(($end_time - $start_time))

output_file=$MODEL-${CORES}.out
 
# extract telemetry
if [ -f "${output_file}" ]; then
    cat <<EOF > ${OUTPUT_DIR}/${APPLICATION}_${MODEL}_${MPI}_${NODES}n_${CORES}c_${DATE}.json
    {
    "application": "$APPLICATION",
    "version": "$VERSION",
    "model": "$MODEL",
    "mpi": "$MPI",
    "instance": "$AZ_INST",
    "date": "$DATE",
    "solver_rating": "$(grep "Solver rating" $output_file | awk '{print $4}')",
    "total_wall_time": "$(grep "Total wall time" $output_file | awk '{print $5}')",
    "num_iterations": "$(grep "Number of iterations" $output_file | awk '{print $5}')",
    "total_run_time": "$clock_time",
    "ppn": "$PPN",
    "total_nodes": "$NODES",
    "total_cores": "$CORES"
    }
EOF

cp $output_file $PBS_O_WORKDIR
fi
